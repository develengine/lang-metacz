backlog
[ ] Consider immediate arrays.
  - Infact, consider immediate values for any type.
    - Probably this is an interface problem... no shit.
[ ] Implement the char type.
  - This type is going to be used for parsing text of source code and so on.
[ ] Add the rebuild call to the template.
[ ] The jump expressions should be more general and not specify the type of condition in the jump itself.
  - Not sure though.


* There shouldn't be special instructions for jumps, only unconditional jump and nonzero jump.
* There shouldn't be special loads or stores, the reference should be enough to tell.
  - Maybe except for immediate values.
* The op instructions should have separate functions, but just one. Separate macros will call this function.
* Names of things should be more structured and they should use the cz prefix.
* We shouldn't rely on specific bit widths of the variables, but write slightly more generic code.
* We should write the system as lean as possible, let validation layers deal  with a majority of things.


17/08/2024
- So... a months work has been lost to something retarded. Maybe the cpu overheated, I dunno.
  - The interpreter file was literally deleted from the disk when the PC blacked out.
- We will use this as an opportunity to rewrite metacz and fix the current shitness.

[-] Make the functions be able to call each other.
  [-] Allow for recursive functions to compile.
    [-] Implement the backpatching.
[-] We need to trim memory to the smallest possible before jumps and function calls.
[-] Create a separate buffer for vm_function output objects, so that we can also deduce them.
[-] Make it so that the compiler doesn't emit code that writes beyon the memory.count.

15/08/2024
    [X] Generator for moving the called function's outputs back to the start of the current stack.

13/08/2024
    [X] Do the arithmetic to compute the new base offset for the function call.
      X 05:00 - 06:05

12/08/2024
    [X] Implement the recording code buffer, so that we can compile functions recursively.
      X 05:15 - 05:59
    [X] Figure out backpatching of the function calls.
      - If we find it but it's 0, then we push it to the backpatch queue.
      X 05:59 - 06:17

02/08/2024
- Mostly just planning.

01/08/2024
    [X] Realign the current objects based on the input to the function.
    [X] Calling convention that handles the base_offset/s and return address.

30/07/2024
    [X] Make sure the functions get a data id at the start of the compile method.
    [X] If provided, the output objects should be used for the function signature.
    [-] Create a meta instruction that freezes argument specification.
      - This is useful maybe for the metacz interface, but only if the compilation could happen alongside the recording of the functions.
        - This isn't something we support yet.

29/07/2024
  [X] Redo the function calling to have the caller realign the output.
    [X] Make the vm_call function that realigns the output automatically.
      [X] Make the compiler be aware of scopes so that we can deal with branched code correctly.
        [X] Redo the final "0 index" frame to be handled by the end_scope instruction.

27/07/2024
- What the fuck...

06/07/2024
[X] Implement the ability to get the length of an array from it's reference.

05/07/2024
[X] Do bound checks for stores as well.
  - I think it may be beneficial to keep the memory above the SP untouched, unless we store into it and want to increment it.
[X] Create a test for the loop and array thing.

[X] Figure out the global memory system.

- Since the system currently only supports data within the interpreter, we need a way to share data with the metacz.
  - Basically the data still needs to be allocated by the interpreter, but stored on the metacz and it must be possible to retrieve this data.
    - To retrieve this data we would use the load and store operations of the global kind.
- So we need an interface which will create a global variable of a given type and return a reference to it.
  - The representation of the variable needs to be chosen of course, this will be under the metacz representation standard.
    - This standard will be interchangeable of course, but should be about the same for any given architecture.

04/07/2024
[X] Redo the operators and jumps to use the registers.
[X] Add reference checks to all the hardcoded types.
[X] IncSP code looks retarder.
  - The code was retardeded because it didn't support negative increments.

03/07/2024
[X] Implement the array type.

- Different platform or extension features can be under their own namespaces and if one want's to use them dirrectly they can be splatted into their corresponding structures.
- Write instructions can be replaced with read and then store ref instruction.
- Also store ref. In/Var/Global isn't necessary since the reference has to track it's own origin.

30/06/2024
[X] Try to make the ASSERTS not warn when in release mode.
  - Done.

- Having outputs be defined as variables may be useful since then we could do without translating the results in the function frame.
  - Something similar to ABAP. We could provide to the procedure a dynamic result base and the results would be written to there.
  - It is however a bit different when it comes to the way we define results of a function.
    - The results of a function are defined by the state of the stack at the procedure's end.
      - This allows us to not have to define the output of the procedure upfront and give the outputs identifiers.

27/06/2024
- What are we missing from a proper language:
  - Types different than int.
  - Proper support for pointers. (Might leave as platform exposed)
    - Well the interpreter still needs to support them though.
  - Structures.
  - Function calling.
  - Arrays and stretchy arrays.
  - The rest of the operations.
  - Meta generation instructions.
  - Meta reflection instructions.

Inter-op example:
- The program being executed in the interpreter must be able to read the internal state of metacz.
  - Read the input parameters of functions or the function that is being recorded.

26/06/2024
[X] Add a test option to build program.
[X] Create basic tests.

- Another option for function calls, maybe even a better one, is to simply realign the arguments on the stack before the call.
  - This way the support for operator overloading could maybe be simplified.


25/06/2024
[X] Create a build program.
[X] Fix all the warnings.

24/06/2024
[X] Add a mem-move instruction and generate it at the end of each function.

23/06/2024
[X] Implement an input parameter pushing mechanism.
[X] Implement an output reading mechanism.
[X] Fix the stack overwriting itself.


function a: 32, b: 64
- aaaa____bbbbbbbb
- ____aaaabbbbbbbb

- https://www.kernel.org/doc/html/latest/core-api/unaligned-memory-access.html

- Maybe the simplest way is to just use memory.
- Should tuples be effected by memory alignment?
  - Maybe this is more of a standard specific thing.
- We need a way to compute the overall alignment requirements of a function procedure / tuple.
  - With functions the computational stack also needs to be considered.
  - It may be easier to just align every function frame to 16 bytes.
- We should also handle the base pointer in the callee rather then the caller, since the caller will lose his base.
- Recording of function arguments should create an implicit scope.


NEO-DEVELOPMENT:

[ ] Create a dump command for the interpreter and metacz.

20/06/2024
[X] Figure out the jump discrepancies.
  - The load.imms were bigger since they also store the size of their payload.
  X 06:28 




[X] We need to change the offset based abstract jumps to something else, like labels or somn.
- 2024/03/06 Done!

- Maybe the frontend and backend could be able to setup the metacz stuff in order to work correctly as well.
  - Basically the backend could setup it's own types so that it can expose them to the user and so on.
  - Maybe this makes sense for the frontend as well?
























SPEEDRUN:
[X] Create structure recording functions.
[X] Create macros for writing instructions and generating functions.
[X] Finger out scopes/jumps.

[X] Implement scopes/jumps.
    - Done much later.

[ ] Think about how to generalize pointers, so that we can use multiple stretchy buffers.
  - Probably our favourite, tagged indices.
  - Or just keep in mind that pointers can get invalidated. (this is normal)
[ ] Consider how a variable size type stack could make complex types and constant folding possible.
[ ] We may need to lock function parameters for recursion.
  [ ] Do we also need some sort of state to make sure things aren't added outside of functions?
[X] See if we could get the correct function id before finishing it's writing.
[X] We might want to pull out the type tag into a variable instead of having it a separate entity.
  - Like `ref_t`.

[ ] Create a procedure for printing the meta code.
[ ] Implement backpatching.
[ ] Implement unconditional jump, jump nonzero and jmp LT.

[X] Strip the type stack from the abstract generator and use only the number of elements on it.
[X] Create some meta instructions to help the context processors with type checking.

Main idea is that code is generated as abstract, and then processed further into a different thing.
This means that the types also need to be abstract (and shared between all the contexts).
- This doesn't mean that every context needs to support every type.
Proper type checking needs to happen later, only basic rules should be implemented whilst generating abstract code.


[X] How do we implement data for types?
  - Some types, like arrays, take extra information, (length, sub-type, etc.), how do we handle this?
  - Types are just rules. How do we approach that?
  - We will see.

- A statement is either just evaluation, or both evaluation and an assignement.
  - Thus, we can break things up into evaluations, and assignements.

We can always implement more complex scopes with per label type flexibility,
but for now we will only implement the labels such that the space needs to be empty before jump.

Simplest evaluation is pushing something from memory/imm to "stack".
Simplest assignement is popping something from "stack" to memory.

mov stack[top], mem[addr]
# vs
mov mem[addr], stack[top]


Alignement defines at what address multiple the type can start.
Size defines how large the type is.

C structures have the size be large enough to tile without spaces (for arrays).

alignement
size
tile_size

There are 2 ways to think about alignement.
Either the alignement is any number, or just a power of 2.
- In reality it's only a power of 2 we care about.


2 things:
- Prevent type and form splitting on conditionals.
- Prevent the programmatic accumulation of things on the stack.

Loop:
[
  - Here we can jump back to the start, if we want.
]
- Here we can no longer jump back to the start.

(
    ...
|
    ...
|
    ...
)

#* simpler *#

scope1 = (
    jmp_top scope1
    jmp_bottom scope1
)

scope1 = (
    jmp_bottom ze scope1
)

# Doesn't work

=================

scope1 = {b
    scope2 = {b
        jmp-end scope1;
    |n
    }e
|n

}e




{b
  jmp |n
  jmp {b
|n
}e









